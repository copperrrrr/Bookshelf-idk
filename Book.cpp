#include "Book.h"
#include <iostream>
#include <limits>

Book::Book() : Base(), title(""), author(""), year(0), annotation(""), genre(""), pages(0) {
    std::cout << ">>> –í—ã–∑–≤–∞–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Book()" << std::endl;
    std::cout << "  –ö–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏" << std::endl;
}

Book::Book(const std::string& t, const std::string& a, int y, const std::string& ann, const std::string& g, int p, double price)
: Base(price), title(t), author(a), year(y), annotation(ann), genre(g), pages(p) {
    std::cout << ">>> –í—ã–∑–≤–∞–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Book(...)" << std::endl;
    std::cout << "   –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞: \"" << title << "\" –∞–≤—Ç–æ—Ä " << author << std::endl;
}

Book::Book(const Book& other) : Base(other), title(other.title), author(other.author), year(other.year),
                                annotation(other.annotation), genre(other.genre), pages(other.pages) {
    std::cout << "–í—ã–∑–≤–∞–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏" << std::endl;
    std::cout << "   –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–∏–≥–∞: \"" << title << "\"" << std::endl;
}

Book::~Book() {
    std::cout << ">>> –í—ã–∑–≤–∞–Ω –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–∏–≥–∏ \"" << title << "\"" << std::endl;

}


void Book::display() const {
    std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë              üìö –ö–ù–ò–ì–ê                      ‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë –ù–∞–∑–≤–∞–Ω–∏–µ:    " << title << std::endl;
    std::cout << "‚ïë –ê–≤—Ç–æ—Ä:       " << author << std::endl;
    std::cout << "‚ïë –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: " << year << std::endl;
    std::cout << "‚ïë –ñ–∞–Ω—Ä:        " << genre << std::endl;
    std::cout << "‚ïë –°—Ç—Ä–∞–Ω–∏—Ü:     " << pages << std::endl;
    std::cout << "‚ïë –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:   " << annotation << std::endl;
    std::cout << "‚ïë –¶–µ–Ω–∞:        " << price << " —Ä—É–±." << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
}


std::string Book::getType() const {
    return "Book";
}

void Book::saveToFile(std::ofstream& out) const {
    out << "Book\n";
    out << title << "\n"
        << author << "\n"
        << year << "\n"
        << annotation << "\n"
        << genre << "\n"
        << pages << "\n"
        << price << "\n"
}

void Book::loadFromFile(std::ifstream& in) {
    std::getline(in, title);
    std::getline(in, author);
    in >> year;
    in.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(in, annotation);
    std::getline(in, genre);
    in >> pages >> price;
    in.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

}

void Book::edit() {
    int choice;
    std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë        –ß–¢–û –ò–ó–ú–ï–ù–ò–¢–¨ –í –ö–ù–ò–ì–ï?               ‚ïë" << std::endl;
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << std::endl;
    std::cout << "‚ïë 1. –ù–∞–∑–≤–∞–Ω–∏–µ                                ‚ïë" << std::endl;
    std::cout << "‚ïë 2. –ê–≤—Ç–æ—Ä                                   ‚ïë" << std::endl;
    std::cout << "‚ïë 3. –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞                             ‚ïë" << std::endl;
    std::cout << "‚ïë 4. –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è                               ‚ïë" << std::endl;
    std::cout << "‚ïë 5. –ñ–∞–Ω—Ä                                    ‚ïë" << std::endl;
    std::cout << "‚ïë 6. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü                      ‚ïë" << std::endl;
    std::cout << "‚ïë 7. –¶–µ–Ω–∞                                    ‚ïë" << std::endl;
    std::cout << "‚ïë 0. –û—Ç–º–µ–Ω–∞                                  ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    std::cout << " –í–∞—à –≤—ã–±–æ—Ä:  ";
    std::cin >> choice;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    try {
        switch(choice) {
            case 1:
                std::cout << "–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:  " << title << std::endl;
                std::cout << "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ";
                std::getline(std::cin, title);
                break;
            case 2:
                std::cout << "–¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä:  " << author << std::endl;
                std::cout << "–ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä:  ";
                std::getline(std::cin, author);
                break;
            case 3:
                std::cout << "–¢–µ–∫—É—â–∏–π –≥–æ–¥:  " << year << std::endl;
                std::cout << "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:  " << year << std::endl;
                std::cin >> year;
                if (year < 0 || year > 2025) {
                    throw std::invalid_argument("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-2025");
                }
                break;
            case 4:
                std::cout << "–¢–µ–∫—É—â–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: " << annotation << std::endl;
                std::cout << "–ù–æ–≤–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: ";
                std::getline(std::cin, annotation);
                break;
            case 5:
                std::cout << "–¢–µ–∫—É—â–∏–π –∂–∞–Ω—Ä: " << genre << std::endl;
                std::cout << "–ù–æ–≤—ã–π –∂–∞–Ω—Ä: ";
                std::getline(std::cin, genre);
                break;
            case 6:
                std::cout << "–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: " << pages << std::endl;
                std::cout << "–ù–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ";
                std::cin >> pages;
                if (pages <= 0) {
                    throw std::invalid_argument("–°—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                }
                break;
            case 7:
                double newPrice;
                std::cout << "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: " << price << " —Ä—É–±." << std::endl;
                std::cout << "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ";
                std::cin >> newPrice;
                setPrice(newPrice);
                break;
            case 0:
                std::cout << "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." << std::endl;
                return;
            default:
                throw std::out_of_range("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            
        }
        std::cout << "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã." << std::endl;
    } catch (const std::exception& e) {
        std::cout << "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }
}

std::string Book::getTitle() const { return title; }
std::string Book::getAuthor() const { return author; }
int Book::getYear() const { return year; }
std::string Book::getAnnotation() const { return annotation; }
std::string Book::getGenre() const { return genre; }
int Book::getPages() const { return pages; }


void Book::setTitle(const std::string& t) { title = t; }
void Book::setAuthor(const std::string& a) { author = a; }
void Book::setYear(int y) {
    if (y < 0 || y > 2025) {
        throw std::invalid_argument("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-2025.");
    }
    year = y;
}
void Book::setAnnotation(const std::string& ann) { annotation = ann; }
void Book::setGenre(const std::string& g) { genre = g; }
void Book::setPages(int p) {
    if (p <= 0) {
        throw std:invalid_argument("–°—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.");
    }
    pages = p;
}

Book& Book::operator=(const Book& other) {
    if (this != &other) {
        Base::operator=(other);
        title = other.title;
        author = other.author;
        year = other.year;
        annotation = other.annotation;
        genre = other.genre;
        pages = other.pages;
        std::cout << ">>> –í—ã–∑–≤–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è " << std::endl;
        std::cout << "   –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–∏–≥–∞: \"" << title << "\"" << std::endl;
    } else {
        std::cout << "–°–∞–º–æ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏." << std::endl;
    }
    return *this;
}